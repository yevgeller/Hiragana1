@page "/currenttest2"
@using Hiragana1.Shared;
@using Hiragana1.Shared.DTOs;
@inject HttpClient Http

<h3>Current Test</h3>
<hr />
@if (currentQuestion == null || currentQuestion.Id < 1)
{
    <QuizSelectionMenu TestInProgress="@testOver" OnSelectionMade="QuizParametersSelectionMade"></QuizSelectionMenu>
}
else
{
    <QuizProgress CurrentQuestionNumber="currentQuestion.PositionNumber"
                  NumberCorrectSoFar="currentQuestion.Id"
                  TotalNumberOfQuestions="quizItems.Length"
                  NumberOfMistakes="@mistakesQty"></QuizProgress>
    <AnswerableTQ2 TestQuestion="currentQuestion" OnAnswer="AnswerHappened"></AnswerableTQ2>
}
@if (testOver)
{
    <h2>Test is Over!</h2>
}
<QuizResultsDisplay QuizResults="quizResults"></QuizResultsDisplay>

@code {
    public bool testOver = false;
    private int mistakesQty = 0;
    QuestionDto currentQuestion = new QuestionDto();
    QuestionDto[] quizItems = new QuestionDto[0];
    List<QuizResult> quizResults = new List<QuizResult>();

    public async Task QuizParametersSelectionMade(SelectedQuizParametersDto parms)
    {
        testOver = false;
        quizItems = await Http?.GetFromJsonAsync<QuestionDto[]>("QuestionV2") ?? new QuestionDto[0];
        if (quizItems.Any())
        {
            currentQuestion = quizItems.OrderBy(x => x.PositionNumber).First();
            //StateHasChanged();
        }
        else
        {
            throw new Exception("No questions returned from Controller");
        }
    }

    private void AnswerHappened(bool isCorrect)
    {
        if (isCorrect)
        {
            currentQuestion = quizItems.Where(q => q.Id == currentQuestion.NextQuizItemId).FirstOrDefault();
            if (currentQuestion == null)
            {
                testOver = true;
                quizResults.Add(new QuizResult { NumberOfErrors = this.mistakesQty, NumberOfQuestions = this.quizItems.Count(), QuizType = QuizType.EnglishToHiragana });
            }
        }
        else
            mistakesQty++;

        //StateHasChanged();
    }

    //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest/1/5");
    //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest2?a=1&b=5");
    //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest");
}

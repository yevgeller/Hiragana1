@page "/currenttest2"
@using Hiragana1.Shared;
@using Hiragana1.Shared.DTOs;
@inject HttpClient Http

<QuizSelectionMenu TestInProgress="@testInProgress" OnSelectionMade="QuizParametersSelectionMade" IsAnother="@quizItems.Any()"></QuizSelectionMenu>

@if (testInProgress)
{
@*     <QuizProgress CurrentQuestionNumber="currentQuestion.PositionNumber"
                  NumberCorrectSoFar="currentQuestion.Id"
                  TotalNumberOfQuestions="quizItems.Length"
                  NumberOfMistakes="@mistakesQty"></QuizProgress> *@
    <AnswerableTQ2 TestQuestion="currentQuestion" OnAnswer="AnswerHappened" MistakesSoFar="mistakesQty" TotalQuestions="@quizItems.Count()"></AnswerableTQ2>
}
@if (quizResults.Any())
{
    <QuizResultsDisplay QuizResults="quizResults"></QuizResultsDisplay>
}
@code {
    public bool testInProgress = false;
    private int mistakesQty = 0;
    QuestionDto currentQuestion = new QuestionDto();
    QuestionDto[] quizItems = new QuestionDto[0];
    List<QuizResult> quizResults = new List<QuizResult>();

    public async Task QuizParametersSelectionMade(SelectedQuizParametersDto parms)
    {
        testInProgress = false;
        mistakesQty = 0;
        //quizItems = await Http?.GetFromJsonAsync<QuestionDto[]>("QuestionV2") ?? new QuestionDto[0];

        quizItems = await Http?.GetFromJsonAsync<QuestionDto[]>($"QuestionV2/Get2?q={parms.NumberOfQuestions}&t={parms.QuizType}") ?? new QuestionDto[0];

        //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest2?a=1&b=5");

        if (quizItems.Any())
        {
            currentQuestion = quizItems.OrderBy(x => x.PositionNumber).First();
            testInProgress = true;
        }
        else
        {
            throw new Exception("No questions returned from Controller");
        }
    }

    private void AnswerHappened(bool isCorrect)
    {
        if (isCorrect)
        {
            currentQuestion = quizItems.Where(q => q.Id == currentQuestion.NextQuizItemId).FirstOrDefault();
            if (currentQuestion == null)
            {
                testInProgress = false;
                quizResults.Add(new QuizResult { NumberOfErrors = this.mistakesQty, NumberOfQuestions = this.quizItems.Count(), QuizType = QuizType.EnglishToHiragana });
            }
        }
        else
            mistakesQty++;

        StateHasChanged();
    }

    //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest/1/5");
    //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest2?a=1&b=5");
    //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest");
}

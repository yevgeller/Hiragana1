@page "/quiz"
@using Hiragana1.Client.Pages.Controls
@using Hiragana1.Shared;
@using Hiragana1.Shared.DTOs;
@inject HttpClient Http

<QuizSelectionMenu TestInProgress="@testInProgress"
                   OnSelectionMade="QuizParametersSelectionMade"
                   IsAnother="@quizItems.Any()"></QuizSelectionMenu>

<ErrorNotification ErrorMessage="@errorMessage"></ErrorNotification>
@if (testInProgress)
{
    <AnswerableTQ2 TestQuestion="currentQuestion"
    OnAnswer="AnswerHappened"
    MistakesSoFar="mistakesQty"
    TotalQuestions="@quizItems.Count()"></AnswerableTQ2>
}
@if (quizResults.Any())
{
    <QuizResultsDisplay QuizResults="quizResults"></QuizResultsDisplay>
}

@code {
    public bool testInProgress = false;
    private int mistakesQty = 0;
    private string errorMessage = string.Empty;
    private SelectedQuizParametersDto currentQuizParameters = new SelectedQuizParametersDto();
    QuestionDTO currentQuestion = new QuestionDTO();
    QuestionDTO[] quizItems = new QuestionDTO[0];
    List<QuizResult> quizResults = new List<QuizResult>();

    private bool callSucceeded = false;

    public async Task testController()
    {
        callSucceeded = await Http?.GetFromJsonAsync<bool>("QuestionV2/GetTest")!;
    }

    public async Task QuizParametersSelectionMade(SelectedQuizParametersDto parms)
    {
        try
        {
            currentQuizParameters = new SelectedQuizParametersDto { NumberOfQuestions=  parms.NumberOfQuestions, QuizType = parms.QuizType };
            errorMessage = string.Empty;
            testInProgress = false;
            mistakesQty = 0;
            quizItems = await Http?.GetFromJsonAsync<QuestionDTO[]>($"QuestionV2/Get2?q={parms.NumberOfQuestions}&t={parms.QuizType}") ?? new QuestionDTO[0];

            if (quizItems.Any() && !quizItems.Any(x => x.IsIncompleteQuizItem()))
            {
                currentQuestion = quizItems.OrderBy(x => x.PositionNumber).First();
                testInProgress = true;
            }
            else if (quizItems.Any(x => x.IsIncompleteQuizItem()))
            {
                errorMessage = "Quiz Generator returned invalid data. Not all questions are complete. Please change quiz parameters and try again.";
            }
            else
            {
                errorMessage = "No questions returned from Controller";
            }
        }
        catch (Exception ex)
        { Console.WriteLine(ex.Message); }
    }

    private void AnswerHappened(bool isCorrect)
    {
        if (isCorrect)
        {
            currentQuestion = quizItems!.Where(q => q.Id == currentQuestion.NextQuizItemId!).FirstOrDefault();
            if (currentQuestion == null)
            {
                testInProgress = false;
                quizResults.Add(new QuizResult { NumberOfErrors = this.mistakesQty, 
                    NumberOfQuestions = this.currentQuizParameters.NumberOfQuestions, 
                    QuizType = currentQuizParameters.QuizType 
                });
            }
        }
        else
            mistakesQty++;

        StateHasChanged();
    }
}
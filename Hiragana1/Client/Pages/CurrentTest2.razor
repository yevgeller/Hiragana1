@page "/currenttest2"
@using Hiragana1.Shared;
@using Hiragana1.Shared.DTOs;
@inject HttpClient Http

<h3>Current Test</h3>

<div>If no test in progress</div>
<ul>
    <li>Fix button display</li>
    <li>Wire up correct/incorrect event</li>
</ul>
@if (currentQuestion == null || currentQuestion.Id < 1)
{
    <button class="btn btn-primary" @onclick="StartNewTest">Start Test</button>
}
@if (currentQuestion != null)
{
    <div>Display a question</div>
    <AnswerableTQ2 TestQuestion="currentQuestion" OnAnswer="AnswerHappened"></AnswerableTQ2>

    <div style="margin-top:100px; border: 1px solid blue;">
        <QuizProgress CurrentQuestionNumber="currentQuestion.Id"
                      NumberCorrectSoFar="currentQuestion.Id"
                      TotalNumberOfQuestions="quizItems.Length"
                      NumberOfMistakes="@mistakesQty"></QuizProgress>
    </div>
}
@if (testOver)
{
    <h2>Test is Over!</h2>
}

@code {
    public bool IsTestInProgress { get; set; } = false;
    public bool testOver = false;
    private int mistakesQty = 0;
    QuestionDto currentQuestion;

    // QuestionV1[] questions;
    QuestionDto[] quizItems;

    public async void StartNewTest()
    { //copy page, create new control, utilize new type
        testOver = false;
        //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest/1/5");
        //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest2?a=1&b=5");
        quizItems = await Http?.GetFromJsonAsync<QuestionDto[]>("QuestionV2");
        //questions = await Http.GetFromJsonAsync<QuestionV1[]>("QuestionV1/NewTest");
        if (quizItems.Any())
        {
            // CurrentTestQuestion = questions.OrderBy(x => x.QuestionId).First();
            currentQuestion = quizItems.OrderBy(x => x.Id).First();
            StateHasChanged();
        }
        else
        {
            throw new Exception("No questions returned from Controller");
        }
        this.IsTestInProgress = true;
    }

    private void AnswerHappened(bool isCorrect)
    {
        //var j = isCorrect;
        if (isCorrect)
        {
            currentQuestion = quizItems.Where(q => q.Id == currentQuestion.NextQuizItemId).FirstOrDefault();
            if (currentQuestion == null)
            {
                testOver = true;
            }
        }
        else
            mistakesQty++;

        StateHasChanged();
    }

}
